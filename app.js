import {
    onAuthStateChanged,
    signOut,
} from "https://www.gstatic.com/firebasejs/11.2.0/firebase-auth.js";
import { auth } from "./firebaseconfig.js";
import {
    collection,
    addDoc,
    getDocs,
    doc,
    updateDoc,
    deleteDoc,
} from "https://www.gstatic.com/firebasejs/11.2.0/firebase-firestore.js";
import { db } from "./firebaseconfig.js";

// === User State Check ===
onAuthStateChanged(auth, (user) => {
    if (user) {
        console.log(user.uid);
    } else {
        window.location = "login.html";
    }
});

// === Logout Functionality ===
const logout_btn = document.querySelector(".logout_btn");
logout_btn.addEventListener("click", function () {
    signOut(auth)
        .then(() => (window.location = "login.html"))
        .catch((error) => console.log(error.message));
});

// === Firestore: Add Todo ===
const form = document.querySelector("#form");
const todo_title = document.querySelector(".todo_title");
const todo_description = document.querySelector(".todo_description");
const sub_btn = document.querySelector(".sub_btn");
const todosRender = document.querySelector(".todosRender");
const todoArr = [];

form.addEventListener("submit", async (event) => {
    event.preventDefault();
    console.log(todo_title.value, todo_description.value);

    try {
        const docRef = await addDoc(collection(db, "todos"), {
            title: todo_title.value,
            description: todo_description.value,
        });
        console.log("Document written with ID: ", docRef.id);
        todoArr.unshift({
            title: todo_title.value,
            description: todo_description.value,
            id: docRef.id,
        });
        todo_title.value = "";
        todo_description.value = "";
        render(todoArr);
    } catch (error) {
        console.log(error.message);
    }
});

// === Firestore: Fetch Todos & Render ===
const getTodos = async () => {
    // Preloader
    const svgContainer = document.createElement("div");
    svgContainer.classList.add("preloader");
    svgContainer.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" preserveAspectRatio="xMidYMid" width="200" height="200" style="shape-rendering: auto; display: block; background: rgb(255, 255, 255);" xmlns:xlink="http://www.w3.org/1999/xlink"><g><g transform="translate(50 50)">
  <g transform="scale(0.8)">
    <g transform="translate(-50 -50)">
      <g>
        <animateTransform keyTimes="0;0.33;0.66;1" values="-20 -20;20 -20;0 20;-20 -20" dur="1s" repeatCount="indefinite" type="translate" attributeName="transform"></animateTransform>
        <path d="M44.19 26.158c-4.817 0-9.345 1.876-12.751 5.282c-3.406 3.406-5.282 7.934-5.282 12.751 c0 4.817 1.876 9.345 5.282 12.751c3.406 3.406 7.934 5.282 12.751 5.282s9.345-1.876 12.751-5.282 c3.406-3.406 5.282-7.934 5.282-12.751c0-4.817-1.876-9.345-5.282-12.751C53.536 28.033 49.007 26.158 44.19 26.158z" fill="rgba(248, 221, 48, 0.274)"></path>
        <path d="M78.712 72.492L67.593 61.373l-3.475-3.475c1.621-2.352 2.779-4.926 3.475-7.596c1.044-4.008 1.044-8.23 0-12.238 c-1.048-4.022-3.146-7.827-6.297-10.979C56.572 22.362 50.381 20 44.19 20C38 20 31.809 22.362 27.085 27.085 c-9.447 9.447-9.447 24.763 0 34.21C31.809 66.019 38 68.381 44.19 68.381c4.798 0 9.593-1.425 13.708-4.262l9.695 9.695 l4.899 4.899C73.351 79.571 74.476 80 75.602 80s2.251-0.429 3.11-1.288C80.429 76.994 80.429 74.209 78.712 72.492z M56.942 56.942 c-3.406 3.406-7.934 5.282-12.751 5.282s-9.345-1.876-12.751-5.282c-3.406-3.406-5.282-7.934-5.282-12.751 c0-4.817 1.876-9.345 5.282-12.751c3.406-3.406 7.934-5.282 12.751-5.282c4.817 0 9.345 1.876 12.751 5.282 c3.406 3.406 5.282 7.934 5.282 12.751C62.223 49.007 60.347 53.536 56.942 56.942z" fill="#f8dd30"></path>
      </g>
    </g>
  </g>
</g><g></g></g><!-- [ldio] generated by https://loading.io --></svg>
    `;
    todosRender.appendChild(svgContainer);

    try {
        const querySnapshot = await getDocs(collection(db, "todos"));
        querySnapshot.forEach((doc) => {
            todoArr.push({ ...doc.data(), id: doc.id });
        });
        svgContainer.innerHTML = "";
        render(todoArr);
    } catch (error) {
        console.log(error.message);
    }
};
getTodos();

// === Render Todos ===
function render(renderArr) {
    todosRender.innerHTML = "";
    renderArr.map((item) => {
        todosRender.innerHTML += `
            <div class="todoBox">
                <div class="todoCtn">
                    <h1>${item.title}</h1>
                    <p>${item.description}</p>
                </div>
                <div class="todoBtn">
                    <button class="editBtn">Edit</button>
                    <button class="deleteBtn">Delete</button>
                </div>
            </div>
        `;
    });

    const editBtns = document.querySelectorAll(".editBtn");
    const deleteBtn = document.querySelectorAll(".deleteBtn");
    attachEventListeners(editBtns, deleteBtn);
}

// === Attach Edit Button Event Listeners ===
function attachEventListeners(edit_todo, delete_todo) {
    edit_todo.forEach((item, index) => {
        item.addEventListener("click", async () => {
            console.log("Edit clicked for index:", index);
            todo_title.value = todoArr[index].title;
            todo_description.value = todoArr[index].description;
            sub_btn.classList.add("disable");

            // Pehle se koi update button hai toh hata do
            let existingUpdateBtn = document.querySelector(".update_btn");
            if (existingUpdateBtn) {
                existingUpdateBtn.remove();
            }

            // Naya update button create karo
            let updateBtn = document.createElement("button");
            updateBtn.className = "update_btn";
            updateBtn.textContent = "Update Todos";
            form.append(updateBtn);

            updateBtn.addEventListener("click", async (event) => {
                event.preventDefault();
                console.log("Update button clicked");

                const todoRef = doc(db, "todos", todoArr[index].id);

                try {
                    await updateDoc(todoRef, {
                        title: todo_title.value,
                        description: todo_description.value,
                    });

                    console.log("Todo updated successfully!");
                    todoArr[index].title = todo_title.value;
                    todoArr[index].description = todo_description.value;
                    render(todoArr);

                    todo_title.value = "";
                    todo_description.value = "";

                    updateBtn.style.display = "none";
                    sub_btn.classList.remove("disable");
                } catch (error) {
                    console.error("Error updating todo:", error);
                }
            });
        });
    });

    delete_todo.forEach((item, index) => {
        item.addEventListener("click", async () => {
            console.log("Delete clicked for index:", index);
            await deleteDoc(doc(db, "todos", todoArr[index].id));
            console.log("todo deleted...");
            todoArr.splice(index, 1);
            render(todoArr);
        });
    });
}
